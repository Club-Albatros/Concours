<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="helpFiles.Text" xml:space="preserve">
    <value>Keep in mind that for flights longer than 50 km you are required to supply evidence. Please submit relevant files below.</value>
  </data>
  <data name="helpPoints.Text" xml:space="preserve">
    <value>Please enter your flight points below. When entering a location description, the module will attempt to match this with existing data and suggest locations that have already been entered. Note coordinates are in &lt;strong&gt;Swiss grid (CH1903)&lt;/strong&gt; or &lt;strong&gt;WSG84&lt;/strong&gt; format &lt;strong&gt;longitude/latitude&lt;/strong&gt; (eg. 547470/197740 or 6.81817265/50.1452500).&lt;br /&gt;A location description is mandatory for the start. Try to find a good description for the intermediare points of the flight. If you've landed outside any regular landing field, you may leave the description empty.</value>
  </data>
  <data name="lblA.Help" xml:space="preserve">
    <value>If not the same as the start. Ignore otherwise.</value>
  </data>
  <data name="lblA.Text" xml:space="preserve">
    <value>A</value>
  </data>
  <data name="lblAddFile.Help" xml:space="preserve">
    <value>Add files as proof of flight (images, gps trace)</value>
  </data>
  <data name="lblAddFile.Text" xml:space="preserve">
    <value>Upload File</value>
  </data>
  <data name="lblB.Help" xml:space="preserve">
    <value>If not the same as landing. Ignore otherwise.</value>
  </data>
  <data name="lblB.Text" xml:space="preserve">
    <value>B</value>
  </data>
  <data name="lblC1.Help" xml:space="preserve">
    <value>Turning Point (irrelevant for free distance flight)</value>
  </data>
  <data name="lblC1.Text" xml:space="preserve">
    <value>C/C1</value>
  </data>
  <data name="lblC2.Help" xml:space="preserve">
    <value>Second turning point for a triangle flight</value>
  </data>
  <data name="lblC2.Text" xml:space="preserve">
    <value>C2</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Select the flight category depending on your type of wing</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="lblComments.Help" xml:space="preserve">
    <value>Any comments about the flight that we should be aware of.</value>
  </data>
  <data name="lblComments.Text" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="lblFlightDate.Help" xml:space="preserve">
    <value>The date the flight was made</value>
  </data>
  <data name="lblFlightDate.Text" xml:space="preserve">
    <value>Flight Date</value>
  </data>
  <data name="lblFlightType.Help" xml:space="preserve">
    <value>Select the FAI flight type. If you're not sure, please consult the competition rules.</value>
  </data>
  <data name="lblFlightType.Text" xml:space="preserve">
    <value>Flight Type</value>
  </data>
  <data name="lblLastModified.Help" xml:space="preserve">
    <value>The flight data was last modified by and on ...</value>
  </data>
  <data name="lblLastModified.Text" xml:space="preserve">
    <value>Last Modified</value>
  </data>
  <data name="lblPilot.Help" xml:space="preserve">
    <value>Displayname of pilot</value>
  </data>
  <data name="lblPilot.Text" xml:space="preserve">
    <value>Pilot</value>
  </data>
  <data name="lblSummary.Help" xml:space="preserve">
    <value>Summary of flight path</value>
  </data>
  <data name="lblSummary.Text" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="lblTotalDistance.Help" xml:space="preserve">
    <value>The total distance between the points that are part of this path</value>
  </data>
  <data name="lblTotalDistance.Text" xml:space="preserve">
    <value>Total distance (kms)</value>
  </data>
  <data name="lblTotalPoints.Help" xml:space="preserve">
    <value>The total nr of points for this flight</value>
  </data>
  <data name="lblTotalPoints.Text" xml:space="preserve">
    <value>Total points</value>
  </data>
  <data name="lblValidated.Help" xml:space="preserve">
    <value>When was this flight validated and by whom</value>
  </data>
  <data name="lblValidated.Text" xml:space="preserve">
    <value>Validated</value>
  </data>
  <data name="ShortDistance.Text" xml:space="preserve">
    <value>The flight is not valid for the competition as it is shorter than 10 km!</value>
  </data>
</root>